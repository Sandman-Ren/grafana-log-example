// Read /var/log and relabel with job names and service names
local.file_match "local_files" {
    path_targets = [{"__path__" = "/var/log/*.log"}]
    sync_period = "5s"
}

loki.source.file "log_scrape" {
    targets    = local.file_match.local_files.targets
    forward_to = [loki.process.labels.receiver]
    tail_from_end = true
}

loki.process "labels" {
    forward_to =  [loki.write.grafana_loki.receiver]
      
    stage.static_labels {
      values = {
        job  = "job_example_service",
        service_name = "example_service",
    }
  }
}

// write to grafana loki
loki.write "grafana_loki" {
    endpoint {
        url = "http://loki:3100/loki/api/v1/push"
    }
}


// Read metrics on Docker socket and send to prometheus
prometheus.exporter.cadvisor "docker_metrics" {
  docker_host = "unix:///var/run/docker.sock"

  storage_duration = "5m"
}


// Configure a prometheus.scrape component to collect cadvisor metrics.
prometheus.scrape "docker_metrics" {
  targets    = prometheus.exporter.cadvisor.docker_metrics.targets
  forward_to = [ prometheus.remote_write.docker_metrics.receiver ]


  scrape_interval = "10s"
}

// Configure a prometheus.remote_write component to send metrics to a Prometheus server.
prometheus.remote_write "docker_metrics" {
  endpoint {
    url = "http://prometheus:9090/api/v1/write"
  }
}